{"mappings":"IA0BAA,EAAe,C,KA1BF,CAACC,EAAKC,KACjB,IACE,MAAMC,EAAkBC,KAAKC,UAAUH,GACvCI,aAAaC,QAAQN,EAAKE,E,CAC1B,MAAOK,GACPC,QAAQD,MAAM,oBAAqBA,EAAME,Q,QAIhCT,IACX,IACE,MAAME,EAAkBG,aAAaK,QAAQV,GAC7C,OAA2B,OAApBE,OAA2BS,EAAYR,KAAKS,MAAMV,E,CACzD,MAAOK,GACPC,QAAQD,MAAM,oBAAqBA,EAAME,Q,UAI9BT,IACb,IACEK,aAAaQ,WAAWb,E,CACxB,MAAOO,GACPC,QAAQM,IAAI,sBAAuBP,EAAME,Q,ICC9B,SAAAM,EAAUC,EAAOC,EAAUC,GAKrCA,IAMAC,EANAD,KAAW,GAJfE,EAAAC,EACCC,kBADD,IAAAF,KAAAG,EAAAF,EAECG,iBAFD,IAAAD,KAAAE,EAAAJ,EAGCK,oBAHD,IAAAD,OAGgBd,EAHhBc,EAWIE,GAAY,EAGZC,EAAW,EAGf,SAASC,IACJV,GACHW,aAAaX,E,CAgBf,SAASY,IAAuB,QAAAC,EAAAC,UAAAC,OAAZC,EAAY,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAZF,EAAYE,GAAAJ,UAAAI,GAC3BC,MAAOC,KACPC,EAAUC,KAAKC,MAAQd,EAO3B,SAASe,IACRf,EAAWa,KAAKC,MAChBzB,EAAS2B,MAAMN,EAAMH,E,CAOtB,SAASU,IACR1B,OAAYR,C,CAfTgB,IAkBCH,IAAaE,GAAiBP,GAMlCwB,IAGDd,SAEqBlB,IAAjBe,GAA8Bc,EAAUxB,EACvCQ,GAMHI,EAAWa,KAAKC,MACXpB,IACJH,EAAY2B,WAAWpB,EAAemB,EAAQF,EAAM3B,KAOrD2B,KAEwB,IAAfrB,IAYVH,EAAY2B,WACXpB,EAAemB,EAAQF,OACNhC,IAAjBe,EAA6BV,EAAQwB,EAAUxB,I,CAQlD,OAHAe,EAAQgB,OAjFCA,SAAO7B,GACkBA,IAAjC8B,GAAiC9B,GAAW,IAApC+B,oBAAR,IAAAD,KACAnB,IACAF,GAAasB,C,EAiFPlB,C,CChIR,MAAMmB,EAASC,SAASC,cAAc,SAE9BC,UAAUC,MAAEC,EAAK9C,QAAE+C,IAAcN,GAmCzC,WACI,MAAMO,EAAc1D,EAAgB2D,KAAK,uBACrCD,IACAF,EAAMtD,MAAQwD,EAAYH,MAC1BE,EAAQvD,MAAQwD,EAAYhD,Q,CArCpCkD,GAEAT,EAAOU,iBAAiB,QAAS7C,EAAS,KAG1C,SAAuB8C,GAWnB,MAAMC,EAAa,CACnBR,MAAOC,EAAMtD,MACbQ,QAAS+C,EAAQvD,OAEjBF,EAAgBgE,KAAK,sBAAuBD,E,KAjBhDZ,EAAOU,iBAAiB,UAoBxB,SAAsBC,GAElB,GADAA,EAAEG,iBACkB,KAAhBT,EAAMtD,OAAkC,KAAlBuD,EAAQvD,MAC9B,OAAOgE,MAAM,oCAEjBzD,QAAQM,IAAI,UAAUyC,EAAMtD,mBAAmBuD,EAAQvD,SACvD4D,EAAEK,cAAcC,QAChBpE,EAAgBqE,OAAO,sB","sources":["src/js/localStorage.js","node_modules/throttle-debounce/throttle.js","src/js/03-feedback.js"],"sourcesContent":["const save = (key, value) => {\n  try {\n    const serializedState = JSON.stringify(value);\n    localStorage.setItem(key, serializedState);\n  } catch (error) {\n    console.error('Set state error: ', error.message);\n  }\n};\n\nconst load = key => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    return serializedState === null ? undefined : JSON.parse(serializedState);\n  } catch (error) {\n    console.error('Get state error: ', error.message);\n  }\n};\n\nconst remove = key => {\n  try {\n    localStorage.removeItem(key);\n  } catch (error) {\n    console.log('Remove item error: ', error.message);\n  }\n};\n\nexport default {\n  save,\n  load,\n  remove,\n};\n","/* eslint-disable no-undefined,no-param-reassign,no-shadow */\n\n/**\n * Throttle execution of a function. Especially useful for rate limiting\n * execution of handlers on events like resize and scroll.\n *\n * @param {number} delay -                  A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher)\n *                                            are most useful.\n * @param {Function} callback -               A function to be executed after delay milliseconds. The `this` context and all arguments are passed through,\n *                                            as-is, to `callback` when the throttled-function is executed.\n * @param {object} [options] -              An object to configure options.\n * @param {boolean} [options.noTrailing] -   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds\n *                                            while the throttled-function is being called. If noTrailing is false or unspecified, callback will be executed\n *                                            one final time after the last throttled-function call. (After the throttled-function has not been called for\n *                                            `delay` milliseconds, the internal counter is reset).\n * @param {boolean} [options.noLeading] -   Optional, defaults to false. If noLeading is false, the first throttled-function call will execute callback\n *                                            immediately. If noLeading is true, the first the callback execution will be skipped. It should be noted that\n *                                            callback will never executed if both noLeading = true and noTrailing = true.\n * @param {boolean} [options.debounceMode] - If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is\n *                                            false (at end), schedule `callback` to execute after `delay` ms.\n *\n * @returns {Function} A new, throttled, function.\n */\nexport default function (delay, callback, options) {\n\tconst {\n\t\tnoTrailing = false,\n\t\tnoLeading = false,\n\t\tdebounceMode = undefined\n\t} = options || {};\n\t/*\n\t * After wrapper has stopped being called, this timeout ensures that\n\t * `callback` is executed at the proper times in `throttle` and `end`\n\t * debounce modes.\n\t */\n\tlet timeoutID;\n\tlet cancelled = false;\n\n\t// Keep track of the last time `callback` was executed.\n\tlet lastExec = 0;\n\n\t// Function to clear existing timeout\n\tfunction clearExistingTimeout() {\n\t\tif (timeoutID) {\n\t\t\tclearTimeout(timeoutID);\n\t\t}\n\t}\n\n\t// Function to cancel next exec\n\tfunction cancel(options) {\n\t\tconst { upcomingOnly = false } = options || {};\n\t\tclearExistingTimeout();\n\t\tcancelled = !upcomingOnly;\n\t}\n\n\t/*\n\t * The `wrapper` function encapsulates all of the throttling / debouncing\n\t * functionality and when executed will limit the rate at which `callback`\n\t * is executed.\n\t */\n\tfunction wrapper(...arguments_) {\n\t\tlet self = this;\n\t\tlet elapsed = Date.now() - lastExec;\n\n\t\tif (cancelled) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Execute `callback` and update the `lastExec` timestamp.\n\t\tfunction exec() {\n\t\t\tlastExec = Date.now();\n\t\t\tcallback.apply(self, arguments_);\n\t\t}\n\n\t\t/*\n\t\t * If `debounceMode` is true (at begin) this is used to clear the flag\n\t\t * to allow future `callback` executions.\n\t\t */\n\t\tfunction clear() {\n\t\t\ttimeoutID = undefined;\n\t\t}\n\n\t\tif (!noLeading && debounceMode && !timeoutID) {\n\t\t\t/*\n\t\t\t * Since `wrapper` is being called for the first time and\n\t\t\t * `debounceMode` is true (at begin), execute `callback`\n\t\t\t * and noLeading != true.\n\t\t\t */\n\t\t\texec();\n\t\t}\n\n\t\tclearExistingTimeout();\n\n\t\tif (debounceMode === undefined && elapsed > delay) {\n\t\t\tif (noLeading) {\n\t\t\t\t/*\n\t\t\t\t * In throttle mode with noLeading, if `delay` time has\n\t\t\t\t * been exceeded, update `lastExec` and schedule `callback`\n\t\t\t\t * to execute after `delay` ms.\n\t\t\t\t */\n\t\t\t\tlastExec = Date.now();\n\t\t\t\tif (!noTrailing) {\n\t\t\t\t\ttimeoutID = setTimeout(debounceMode ? clear : exec, delay);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t/*\n\t\t\t\t * In throttle mode without noLeading, if `delay` time has been exceeded, execute\n\t\t\t\t * `callback`.\n\t\t\t\t */\n\t\t\t\texec();\n\t\t\t}\n\t\t} else if (noTrailing !== true) {\n\t\t\t/*\n\t\t\t * In trailing throttle mode, since `delay` time has not been\n\t\t\t * exceeded, schedule `callback` to execute `delay` ms after most\n\t\t\t * recent execution.\n\t\t\t *\n\t\t\t * If `debounceMode` is true (at begin), schedule `clear` to execute\n\t\t\t * after `delay` ms.\n\t\t\t *\n\t\t\t * If `debounceMode` is false (at end), schedule `callback` to\n\t\t\t * execute after `delay` ms.\n\t\t\t */\n\t\t\ttimeoutID = setTimeout(\n\t\t\t\tdebounceMode ? clear : exec,\n\t\t\t\tdebounceMode === undefined ? delay - elapsed : delay\n\t\t\t);\n\t\t}\n\t}\n\n\twrapper.cancel = cancel;\n\n\t// Return the wrapper function.\n\treturn wrapper;\n}\n","import localStorageAPI from './localStorage';\n\nimport { throttle } from 'throttle-debounce';\n\nconst formEl = document.querySelector('form')\n\nconst { elements: { email, message } } = formEl\n\npopulateTextArea()\n\nformEl.addEventListener('input', throttle(500, onInputChange))\nformEl.addEventListener('submit', onFormSubmit)\n\nfunction onInputChange(e) {\n    // const {\n    //     email: { value: emailValue },\n    //     message: {value: messageValue},\n    // } = formEl\n\n    // const newMessage = {\n    //     emailValue,\n    //     messageValue,\n    // };\n\n    const newMessage = {\n    email: email.value,\n    message: message.value,\n    }\n    localStorageAPI.save('feedback-form-state', newMessage)\n}\n\nfunction onFormSubmit(e) {\n    e.preventDefault()\n    if (email.value === \"\" || message.value === \"\") {\n        return alert(\"Всі поля повинні бути заповнені!\")\n    } \n    console.log(`Email: ${email.value}, message: ${message.value}`)\n    e.currentTarget.reset()\n    localStorageAPI.remove('feedback-form-state')\n}\n\nfunction populateTextArea() {\n    const messagesArr = localStorageAPI.load('feedback-form-state')\n    if (messagesArr) {\n        email.value = messagesArr.email\n        message.value = messagesArr.message\n    }   \n}\n"],"names":["$2338c8cd734f85a6$export$2e2bcd8739ae039","key","value","serializedState","JSON","stringify","localStorage","setItem","error","console","message","getItem","undefined","parse","removeItem","log","$8b2e3fa012f8d6d4$export$de363e709c412c8a","delay","callback","options","timeoutID","_ref$noTrailing","_ref","noTrailing","_ref$noLeading","noLeading","_ref$debounceMode","debounceMode","cancelled","lastExec","clearExistingTimeout","clearTimeout","wrapper","_len","arguments","length","arguments_","Array","_key","self","this","elapsed","Date","now","exec","apply","clear","setTimeout","cancel","_ref2$upcomingOnly","upcomingOnly","$945622fd0f572e60$var$formEl","document","querySelector","elements","email","$945622fd0f572e60$var$email","$945622fd0f572e60$var$message","messagesArr","load","$945622fd0f572e60$var$populateTextArea","addEventListener","e","newMessage","save","preventDefault","alert","currentTarget","reset","remove"],"version":3,"file":"03-feedback.b31a2499.js.map"}